// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victorkt/flaggio/internal/repository (interfaces: Evaluation)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	flaggio "github.com/victorkt/flaggio/internal/flaggio"
	reflect "reflect"
)

// MockEvaluation is a mock of Evaluation interface
type MockEvaluation struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationMockRecorder
}

// MockEvaluationMockRecorder is the mock recorder for MockEvaluation
type MockEvaluationMockRecorder struct {
	mock *MockEvaluation
}

// NewMockEvaluation creates a new mock instance
func NewMockEvaluation(ctrl *gomock.Controller) *MockEvaluation {
	mock := &MockEvaluation{ctrl: ctrl}
	mock.recorder = &MockEvaluationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvaluation) EXPECT() *MockEvaluationMockRecorder {
	return m.recorder
}

// DeleteAllByUserID mocks base method
func (m *MockEvaluation) DeleteAllByUserID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByUserID indicates an expected call of DeleteAllByUserID
func (mr *MockEvaluationMockRecorder) DeleteAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByUserID", reflect.TypeOf((*MockEvaluation)(nil).DeleteAllByUserID), arg0, arg1)
}

// FindAllByUserID mocks base method
func (m *MockEvaluation) FindAllByUserID(arg0 context.Context, arg1 string) (flaggio.EvaluationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByUserID", arg0, arg1)
	ret0, _ := ret[0].(flaggio.EvaluationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserID indicates an expected call of FindAllByUserID
func (mr *MockEvaluationMockRecorder) FindAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserID", reflect.TypeOf((*MockEvaluation)(nil).FindAllByUserID), arg0, arg1)
}

// FindByUserIDAndFlagID mocks base method
func (m *MockEvaluation) FindByUserIDAndFlagID(arg0 context.Context, arg1, arg2 string) (*flaggio.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndFlagID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*flaggio.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndFlagID indicates an expected call of FindByUserIDAndFlagID
func (mr *MockEvaluationMockRecorder) FindByUserIDAndFlagID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndFlagID", reflect.TypeOf((*MockEvaluation)(nil).FindByUserIDAndFlagID), arg0, arg1, arg2)
}

// Replace mocks base method
func (m *MockEvaluation) Replace(arg0 context.Context, arg1 string, arg2 flaggio.EvaluationList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace
func (mr *MockEvaluationMockRecorder) Replace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockEvaluation)(nil).Replace), arg0, arg1, arg2)
}
